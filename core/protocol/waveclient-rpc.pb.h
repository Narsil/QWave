// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_waveclient_2drpc_2eproto__INCLUDED
#define PROTOBUF_waveclient_2drpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"

namespace waveserver {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_waveclient_2drpc_2eproto();
void protobuf_AssignDesc_waveclient_2drpc_2eproto();
void protobuf_ShutdownFile_waveclient_2drpc_2eproto();

class ProtocolOpenRequest;
class ProtocolWaveletUpdate;
class ProtocolSubmitRequest;
class ProtocolSubmitResponse;

// ===================================================================

class ProtocolOpenRequest : public ::google::protobuf::Message {
 public:
  ProtocolOpenRequest();
  virtual ~ProtocolOpenRequest();
  
  ProtocolOpenRequest(const ProtocolOpenRequest& from);
  
  inline ProtocolOpenRequest& operator=(const ProtocolOpenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolOpenRequest& default_instance();
  void Swap(ProtocolOpenRequest* other);
  
  // implements Message ----------------------------------------------
  
  ProtocolOpenRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtocolOpenRequest& from);
  void MergeFrom(const ProtocolOpenRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string participant_id = 1;
  inline bool has_participant_id() const;
  inline void clear_participant_id();
  static const int kParticipantIdFieldNumber = 1;
  inline const ::std::string& participant_id() const;
  inline void set_participant_id(const ::std::string& value);
  inline void set_participant_id(const char* value);
  inline void set_participant_id(const char* value, size_t size);
  inline ::std::string* mutable_participant_id();
  
  // required string wave_id = 2;
  inline bool has_wave_id() const;
  inline void clear_wave_id();
  static const int kWaveIdFieldNumber = 2;
  inline const ::std::string& wave_id() const;
  inline void set_wave_id(const ::std::string& value);
  inline void set_wave_id(const char* value);
  inline void set_wave_id(const char* value, size_t size);
  inline ::std::string* mutable_wave_id();
  
  // repeated string wavelet_id_prefix = 3;
  inline int wavelet_id_prefix_size() const;
  inline void clear_wavelet_id_prefix();
  static const int kWaveletIdPrefixFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& wavelet_id_prefix() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_wavelet_id_prefix();
  inline const ::std::string& wavelet_id_prefix(int index) const;
  inline ::std::string* mutable_wavelet_id_prefix(int index);
  inline void set_wavelet_id_prefix(int index, const ::std::string& value);
  inline void set_wavelet_id_prefix(int index, const char* value);
  inline void set_wavelet_id_prefix(int index, const char* value, size_t size);
  inline ::std::string* add_wavelet_id_prefix();
  inline void add_wavelet_id_prefix(const ::std::string& value);
  inline void add_wavelet_id_prefix(const char* value);
  inline void add_wavelet_id_prefix(const char* value, size_t size);
  
  // optional int32 maximum_wavelets = 4;
  inline bool has_maximum_wavelets() const;
  inline void clear_maximum_wavelets();
  static const int kMaximumWaveletsFieldNumber = 4;
  inline ::google::protobuf::int32 maximum_wavelets() const;
  inline void set_maximum_wavelets(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* participant_id_;
  static const ::std::string _default_participant_id_;
  ::std::string* wave_id_;
  static const ::std::string _default_wave_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> wavelet_id_prefix_;
  ::google::protobuf::int32 maximum_wavelets_;
  friend void  protobuf_AddDesc_waveclient_2drpc_2eproto();
  friend void protobuf_AssignDesc_waveclient_2drpc_2eproto();
  friend void protobuf_ShutdownFile_waveclient_2drpc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ProtocolOpenRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProtocolWaveletUpdate : public ::google::protobuf::Message {
 public:
  ProtocolWaveletUpdate();
  virtual ~ProtocolWaveletUpdate();
  
  ProtocolWaveletUpdate(const ProtocolWaveletUpdate& from);
  
  inline ProtocolWaveletUpdate& operator=(const ProtocolWaveletUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolWaveletUpdate& default_instance();
  void Swap(ProtocolWaveletUpdate* other);
  
  // implements Message ----------------------------------------------
  
  ProtocolWaveletUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtocolWaveletUpdate& from);
  void MergeFrom(const ProtocolWaveletUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string wavelet_name = 1;
  inline bool has_wavelet_name() const;
  inline void clear_wavelet_name();
  static const int kWaveletNameFieldNumber = 1;
  inline const ::std::string& wavelet_name() const;
  inline void set_wavelet_name(const ::std::string& value);
  inline void set_wavelet_name(const char* value);
  inline void set_wavelet_name(const char* value, size_t size);
  inline ::std::string* mutable_wavelet_name();
  
  // repeated .protocol.ProtocolWaveletDelta applied_delta = 2;
  inline int applied_delta_size() const;
  inline void clear_applied_delta();
  static const int kAppliedDeltaFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::ProtocolWaveletDelta >& applied_delta() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::ProtocolWaveletDelta >* mutable_applied_delta();
  inline const ::protocol::ProtocolWaveletDelta& applied_delta(int index) const;
  inline ::protocol::ProtocolWaveletDelta* mutable_applied_delta(int index);
  inline ::protocol::ProtocolWaveletDelta* add_applied_delta();
  
  // optional .protocol.ProtocolHashedVersion commit_notice = 3;
  inline bool has_commit_notice() const;
  inline void clear_commit_notice();
  static const int kCommitNoticeFieldNumber = 3;
  inline const ::protocol::ProtocolHashedVersion& commit_notice() const;
  inline ::protocol::ProtocolHashedVersion* mutable_commit_notice();
  
  // optional .protocol.ProtocolHashedVersion resulting_version = 4;
  inline bool has_resulting_version() const;
  inline void clear_resulting_version();
  static const int kResultingVersionFieldNumber = 4;
  inline const ::protocol::ProtocolHashedVersion& resulting_version() const;
  inline ::protocol::ProtocolHashedVersion* mutable_resulting_version();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* wavelet_name_;
  static const ::std::string _default_wavelet_name_;
  ::google::protobuf::RepeatedPtrField< ::protocol::ProtocolWaveletDelta > applied_delta_;
  ::protocol::ProtocolHashedVersion* commit_notice_;
  ::protocol::ProtocolHashedVersion* resulting_version_;
  friend void  protobuf_AddDesc_waveclient_2drpc_2eproto();
  friend void protobuf_AssignDesc_waveclient_2drpc_2eproto();
  friend void protobuf_ShutdownFile_waveclient_2drpc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ProtocolWaveletUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ProtocolSubmitRequest : public ::google::protobuf::Message {
 public:
  ProtocolSubmitRequest();
  virtual ~ProtocolSubmitRequest();
  
  ProtocolSubmitRequest(const ProtocolSubmitRequest& from);
  
  inline ProtocolSubmitRequest& operator=(const ProtocolSubmitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolSubmitRequest& default_instance();
  void Swap(ProtocolSubmitRequest* other);
  
  // implements Message ----------------------------------------------
  
  ProtocolSubmitRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtocolSubmitRequest& from);
  void MergeFrom(const ProtocolSubmitRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string wavelet_name = 1;
  inline bool has_wavelet_name() const;
  inline void clear_wavelet_name();
  static const int kWaveletNameFieldNumber = 1;
  inline const ::std::string& wavelet_name() const;
  inline void set_wavelet_name(const ::std::string& value);
  inline void set_wavelet_name(const char* value);
  inline void set_wavelet_name(const char* value, size_t size);
  inline ::std::string* mutable_wavelet_name();
  
  // required .protocol.ProtocolWaveletDelta delta = 2;
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 2;
  inline const ::protocol::ProtocolWaveletDelta& delta() const;
  inline ::protocol::ProtocolWaveletDelta* mutable_delta();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* wavelet_name_;
  static const ::std::string _default_wavelet_name_;
  ::protocol::ProtocolWaveletDelta* delta_;
  friend void  protobuf_AddDesc_waveclient_2drpc_2eproto();
  friend void protobuf_AssignDesc_waveclient_2drpc_2eproto();
  friend void protobuf_ShutdownFile_waveclient_2drpc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ProtocolSubmitRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProtocolSubmitResponse : public ::google::protobuf::Message {
 public:
  ProtocolSubmitResponse();
  virtual ~ProtocolSubmitResponse();
  
  ProtocolSubmitResponse(const ProtocolSubmitResponse& from);
  
  inline ProtocolSubmitResponse& operator=(const ProtocolSubmitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolSubmitResponse& default_instance();
  void Swap(ProtocolSubmitResponse* other);
  
  // implements Message ----------------------------------------------
  
  ProtocolSubmitResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtocolSubmitResponse& from);
  void MergeFrom(const ProtocolSubmitResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 operations_applied = 1;
  inline bool has_operations_applied() const;
  inline void clear_operations_applied();
  static const int kOperationsAppliedFieldNumber = 1;
  inline ::google::protobuf::int32 operations_applied() const;
  inline void set_operations_applied(::google::protobuf::int32 value);
  
  // optional string error_message = 2;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 operations_applied_;
  ::std::string* error_message_;
  static const ::std::string _default_error_message_;
  friend void  protobuf_AddDesc_waveclient_2drpc_2eproto();
  friend void protobuf_AssignDesc_waveclient_2drpc_2eproto();
  friend void protobuf_ShutdownFile_waveclient_2drpc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ProtocolSubmitResponse* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// ProtocolOpenRequest

// required string participant_id = 1;
inline bool ProtocolOpenRequest::has_participant_id() const {
  return _has_bit(0);
}
inline void ProtocolOpenRequest::clear_participant_id() {
  if (participant_id_ != &_default_participant_id_) {
    participant_id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ProtocolOpenRequest::participant_id() const {
  return *participant_id_;
}
inline void ProtocolOpenRequest::set_participant_id(const ::std::string& value) {
  _set_bit(0);
  if (participant_id_ == &_default_participant_id_) {
    participant_id_ = new ::std::string;
  }
  participant_id_->assign(value);
}
inline void ProtocolOpenRequest::set_participant_id(const char* value) {
  _set_bit(0);
  if (participant_id_ == &_default_participant_id_) {
    participant_id_ = new ::std::string;
  }
  participant_id_->assign(value);
}
inline void ProtocolOpenRequest::set_participant_id(const char* value, size_t size) {
  _set_bit(0);
  if (participant_id_ == &_default_participant_id_) {
    participant_id_ = new ::std::string;
  }
  participant_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtocolOpenRequest::mutable_participant_id() {
  _set_bit(0);
  if (participant_id_ == &_default_participant_id_) {
    participant_id_ = new ::std::string;
  }
  return participant_id_;
}

// required string wave_id = 2;
inline bool ProtocolOpenRequest::has_wave_id() const {
  return _has_bit(1);
}
inline void ProtocolOpenRequest::clear_wave_id() {
  if (wave_id_ != &_default_wave_id_) {
    wave_id_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ProtocolOpenRequest::wave_id() const {
  return *wave_id_;
}
inline void ProtocolOpenRequest::set_wave_id(const ::std::string& value) {
  _set_bit(1);
  if (wave_id_ == &_default_wave_id_) {
    wave_id_ = new ::std::string;
  }
  wave_id_->assign(value);
}
inline void ProtocolOpenRequest::set_wave_id(const char* value) {
  _set_bit(1);
  if (wave_id_ == &_default_wave_id_) {
    wave_id_ = new ::std::string;
  }
  wave_id_->assign(value);
}
inline void ProtocolOpenRequest::set_wave_id(const char* value, size_t size) {
  _set_bit(1);
  if (wave_id_ == &_default_wave_id_) {
    wave_id_ = new ::std::string;
  }
  wave_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtocolOpenRequest::mutable_wave_id() {
  _set_bit(1);
  if (wave_id_ == &_default_wave_id_) {
    wave_id_ = new ::std::string;
  }
  return wave_id_;
}

// repeated string wavelet_id_prefix = 3;
inline int ProtocolOpenRequest::wavelet_id_prefix_size() const {
  return wavelet_id_prefix_.size();
}
inline void ProtocolOpenRequest::clear_wavelet_id_prefix() {
  wavelet_id_prefix_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProtocolOpenRequest::wavelet_id_prefix() const {
  return wavelet_id_prefix_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProtocolOpenRequest::mutable_wavelet_id_prefix() {
  return &wavelet_id_prefix_;
}
inline const ::std::string& ProtocolOpenRequest::wavelet_id_prefix(int index) const {
  return wavelet_id_prefix_.Get(index);
}
inline ::std::string* ProtocolOpenRequest::mutable_wavelet_id_prefix(int index) {
  return wavelet_id_prefix_.Mutable(index);
}
inline void ProtocolOpenRequest::set_wavelet_id_prefix(int index, const ::std::string& value) {
  wavelet_id_prefix_.Mutable(index)->assign(value);
}
inline void ProtocolOpenRequest::set_wavelet_id_prefix(int index, const char* value) {
  wavelet_id_prefix_.Mutable(index)->assign(value);
}
inline void ProtocolOpenRequest::set_wavelet_id_prefix(int index, const char* value, size_t size) {
  wavelet_id_prefix_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtocolOpenRequest::add_wavelet_id_prefix() {
  return wavelet_id_prefix_.Add();
}
inline void ProtocolOpenRequest::add_wavelet_id_prefix(const ::std::string& value) {
  wavelet_id_prefix_.Add()->assign(value);
}
inline void ProtocolOpenRequest::add_wavelet_id_prefix(const char* value) {
  wavelet_id_prefix_.Add()->assign(value);
}
inline void ProtocolOpenRequest::add_wavelet_id_prefix(const char* value, size_t size) {
  wavelet_id_prefix_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// optional int32 maximum_wavelets = 4;
inline bool ProtocolOpenRequest::has_maximum_wavelets() const {
  return _has_bit(3);
}
inline void ProtocolOpenRequest::clear_maximum_wavelets() {
  maximum_wavelets_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 ProtocolOpenRequest::maximum_wavelets() const {
  return maximum_wavelets_;
}
inline void ProtocolOpenRequest::set_maximum_wavelets(::google::protobuf::int32 value) {
  _set_bit(3);
  maximum_wavelets_ = value;
}

// -------------------------------------------------------------------

// ProtocolWaveletUpdate

// required string wavelet_name = 1;
inline bool ProtocolWaveletUpdate::has_wavelet_name() const {
  return _has_bit(0);
}
inline void ProtocolWaveletUpdate::clear_wavelet_name() {
  if (wavelet_name_ != &_default_wavelet_name_) {
    wavelet_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ProtocolWaveletUpdate::wavelet_name() const {
  return *wavelet_name_;
}
inline void ProtocolWaveletUpdate::set_wavelet_name(const ::std::string& value) {
  _set_bit(0);
  if (wavelet_name_ == &_default_wavelet_name_) {
    wavelet_name_ = new ::std::string;
  }
  wavelet_name_->assign(value);
}
inline void ProtocolWaveletUpdate::set_wavelet_name(const char* value) {
  _set_bit(0);
  if (wavelet_name_ == &_default_wavelet_name_) {
    wavelet_name_ = new ::std::string;
  }
  wavelet_name_->assign(value);
}
inline void ProtocolWaveletUpdate::set_wavelet_name(const char* value, size_t size) {
  _set_bit(0);
  if (wavelet_name_ == &_default_wavelet_name_) {
    wavelet_name_ = new ::std::string;
  }
  wavelet_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtocolWaveletUpdate::mutable_wavelet_name() {
  _set_bit(0);
  if (wavelet_name_ == &_default_wavelet_name_) {
    wavelet_name_ = new ::std::string;
  }
  return wavelet_name_;
}

// repeated .protocol.ProtocolWaveletDelta applied_delta = 2;
inline int ProtocolWaveletUpdate::applied_delta_size() const {
  return applied_delta_.size();
}
inline void ProtocolWaveletUpdate::clear_applied_delta() {
  applied_delta_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::ProtocolWaveletDelta >&
ProtocolWaveletUpdate::applied_delta() const {
  return applied_delta_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::ProtocolWaveletDelta >*
ProtocolWaveletUpdate::mutable_applied_delta() {
  return &applied_delta_;
}
inline const ::protocol::ProtocolWaveletDelta& ProtocolWaveletUpdate::applied_delta(int index) const {
  return applied_delta_.Get(index);
}
inline ::protocol::ProtocolWaveletDelta* ProtocolWaveletUpdate::mutable_applied_delta(int index) {
  return applied_delta_.Mutable(index);
}
inline ::protocol::ProtocolWaveletDelta* ProtocolWaveletUpdate::add_applied_delta() {
  return applied_delta_.Add();
}

// optional .protocol.ProtocolHashedVersion commit_notice = 3;
inline bool ProtocolWaveletUpdate::has_commit_notice() const {
  return _has_bit(2);
}
inline void ProtocolWaveletUpdate::clear_commit_notice() {
  if (commit_notice_ != NULL) commit_notice_->::protocol::ProtocolHashedVersion::Clear();
  _clear_bit(2);
}
inline const ::protocol::ProtocolHashedVersion& ProtocolWaveletUpdate::commit_notice() const {
  return commit_notice_ != NULL ? *commit_notice_ : *default_instance_->commit_notice_;
}
inline ::protocol::ProtocolHashedVersion* ProtocolWaveletUpdate::mutable_commit_notice() {
  _set_bit(2);
  if (commit_notice_ == NULL) commit_notice_ = new ::protocol::ProtocolHashedVersion;
  return commit_notice_;
}

// optional .protocol.ProtocolHashedVersion resulting_version = 4;
inline bool ProtocolWaveletUpdate::has_resulting_version() const {
  return _has_bit(3);
}
inline void ProtocolWaveletUpdate::clear_resulting_version() {
  if (resulting_version_ != NULL) resulting_version_->::protocol::ProtocolHashedVersion::Clear();
  _clear_bit(3);
}
inline const ::protocol::ProtocolHashedVersion& ProtocolWaveletUpdate::resulting_version() const {
  return resulting_version_ != NULL ? *resulting_version_ : *default_instance_->resulting_version_;
}
inline ::protocol::ProtocolHashedVersion* ProtocolWaveletUpdate::mutable_resulting_version() {
  _set_bit(3);
  if (resulting_version_ == NULL) resulting_version_ = new ::protocol::ProtocolHashedVersion;
  return resulting_version_;
}

// -------------------------------------------------------------------

// ProtocolSubmitRequest

// required string wavelet_name = 1;
inline bool ProtocolSubmitRequest::has_wavelet_name() const {
  return _has_bit(0);
}
inline void ProtocolSubmitRequest::clear_wavelet_name() {
  if (wavelet_name_ != &_default_wavelet_name_) {
    wavelet_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ProtocolSubmitRequest::wavelet_name() const {
  return *wavelet_name_;
}
inline void ProtocolSubmitRequest::set_wavelet_name(const ::std::string& value) {
  _set_bit(0);
  if (wavelet_name_ == &_default_wavelet_name_) {
    wavelet_name_ = new ::std::string;
  }
  wavelet_name_->assign(value);
}
inline void ProtocolSubmitRequest::set_wavelet_name(const char* value) {
  _set_bit(0);
  if (wavelet_name_ == &_default_wavelet_name_) {
    wavelet_name_ = new ::std::string;
  }
  wavelet_name_->assign(value);
}
inline void ProtocolSubmitRequest::set_wavelet_name(const char* value, size_t size) {
  _set_bit(0);
  if (wavelet_name_ == &_default_wavelet_name_) {
    wavelet_name_ = new ::std::string;
  }
  wavelet_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtocolSubmitRequest::mutable_wavelet_name() {
  _set_bit(0);
  if (wavelet_name_ == &_default_wavelet_name_) {
    wavelet_name_ = new ::std::string;
  }
  return wavelet_name_;
}

// required .protocol.ProtocolWaveletDelta delta = 2;
inline bool ProtocolSubmitRequest::has_delta() const {
  return _has_bit(1);
}
inline void ProtocolSubmitRequest::clear_delta() {
  if (delta_ != NULL) delta_->::protocol::ProtocolWaveletDelta::Clear();
  _clear_bit(1);
}
inline const ::protocol::ProtocolWaveletDelta& ProtocolSubmitRequest::delta() const {
  return delta_ != NULL ? *delta_ : *default_instance_->delta_;
}
inline ::protocol::ProtocolWaveletDelta* ProtocolSubmitRequest::mutable_delta() {
  _set_bit(1);
  if (delta_ == NULL) delta_ = new ::protocol::ProtocolWaveletDelta;
  return delta_;
}

// -------------------------------------------------------------------

// ProtocolSubmitResponse

// required int32 operations_applied = 1;
inline bool ProtocolSubmitResponse::has_operations_applied() const {
  return _has_bit(0);
}
inline void ProtocolSubmitResponse::clear_operations_applied() {
  operations_applied_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 ProtocolSubmitResponse::operations_applied() const {
  return operations_applied_;
}
inline void ProtocolSubmitResponse::set_operations_applied(::google::protobuf::int32 value) {
  _set_bit(0);
  operations_applied_ = value;
}

// optional string error_message = 2;
inline bool ProtocolSubmitResponse::has_error_message() const {
  return _has_bit(1);
}
inline void ProtocolSubmitResponse::clear_error_message() {
  if (error_message_ != &_default_error_message_) {
    error_message_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ProtocolSubmitResponse::error_message() const {
  return *error_message_;
}
inline void ProtocolSubmitResponse::set_error_message(const ::std::string& value) {
  _set_bit(1);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void ProtocolSubmitResponse::set_error_message(const char* value) {
  _set_bit(1);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void ProtocolSubmitResponse::set_error_message(const char* value, size_t size) {
  _set_bit(1);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtocolSubmitResponse::mutable_error_message() {
  _set_bit(1);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}


}  // namespace waveserver

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_waveclient_2drpc_2eproto__INCLUDED
