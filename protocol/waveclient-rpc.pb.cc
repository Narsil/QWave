// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "waveclient-rpc.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace waveserver {

namespace {

const ::google::protobuf::Descriptor* ProtocolOpenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolOpenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtocolWaveletUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolWaveletUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtocolSubmitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolSubmitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtocolSubmitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolSubmitResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_waveclient_2drpc_2eproto() {
  protobuf_AddDesc_waveclient_2drpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "waveclient-rpc.proto");
  GOOGLE_CHECK(file != NULL);
  ProtocolOpenRequest_descriptor_ = file->message_type(0);
  static const int ProtocolOpenRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolOpenRequest, participant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolOpenRequest, wave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolOpenRequest, wavelet_id_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolOpenRequest, maximum_wavelets_),
  };
  ProtocolOpenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolOpenRequest_descriptor_,
      ProtocolOpenRequest::default_instance_,
      ProtocolOpenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolOpenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolOpenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolOpenRequest));
  ProtocolWaveletUpdate_descriptor_ = file->message_type(1);
  static const int ProtocolWaveletUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolWaveletUpdate, wavelet_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolWaveletUpdate, applied_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolWaveletUpdate, commit_notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolWaveletUpdate, resulting_version_),
  };
  ProtocolWaveletUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolWaveletUpdate_descriptor_,
      ProtocolWaveletUpdate::default_instance_,
      ProtocolWaveletUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolWaveletUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolWaveletUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolWaveletUpdate));
  ProtocolSubmitRequest_descriptor_ = file->message_type(2);
  static const int ProtocolSubmitRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolSubmitRequest, wavelet_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolSubmitRequest, delta_),
  };
  ProtocolSubmitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolSubmitRequest_descriptor_,
      ProtocolSubmitRequest::default_instance_,
      ProtocolSubmitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolSubmitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolSubmitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolSubmitRequest));
  ProtocolSubmitResponse_descriptor_ = file->message_type(3);
  static const int ProtocolSubmitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolSubmitResponse, operations_applied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolSubmitResponse, error_message_),
  };
  ProtocolSubmitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolSubmitResponse_descriptor_,
      ProtocolSubmitResponse::default_instance_,
      ProtocolSubmitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolSubmitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolSubmitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolSubmitResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_waveclient_2drpc_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolOpenRequest_descriptor_, &ProtocolOpenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolWaveletUpdate_descriptor_, &ProtocolWaveletUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolSubmitRequest_descriptor_, &ProtocolSubmitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolSubmitResponse_descriptor_, &ProtocolSubmitResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_waveclient_2drpc_2eproto() {
  delete ProtocolOpenRequest::default_instance_;
  delete ProtocolOpenRequest_reflection_;
  delete ProtocolWaveletUpdate::default_instance_;
  delete ProtocolWaveletUpdate_reflection_;
  delete ProtocolSubmitRequest::default_instance_;
  delete ProtocolSubmitRequest_reflection_;
  delete ProtocolSubmitResponse::default_instance_;
  delete ProtocolSubmitResponse_reflection_;
}

void protobuf_AddDesc_waveclient_2drpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024waveclient-rpc.proto\022\nwaveserver\032\014comm"
    "on.proto\"s\n\023ProtocolOpenRequest\022\026\n\016parti"
    "cipant_id\030\001 \002(\t\022\017\n\007wave_id\030\002 \002(\t\022\031\n\021wave"
    "let_id_prefix\030\003 \003(\t\022\030\n\020maximum_wavelets\030"
    "\004 \001(\005\"\330\001\n\025ProtocolWaveletUpdate\022\024\n\014wavel"
    "et_name\030\001 \002(\t\0225\n\rapplied_delta\030\002 \003(\0132\036.p"
    "rotocol.ProtocolWaveletDelta\0226\n\rcommit_n"
    "otice\030\003 \001(\0132\037.protocol.ProtocolHashedVer"
    "sion\022:\n\021resulting_version\030\004 \001(\0132\037.protoc"
    "ol.ProtocolHashedVersion\"\\\n\025ProtocolSubm"
    "itRequest\022\024\n\014wavelet_name\030\001 \002(\t\022-\n\005delta"
    "\030\002 \002(\0132\036.protocol.ProtocolWaveletDelta\"K"
    "\n\026ProtocolSubmitResponse\022\032\n\022operations_a"
    "pplied\030\001 \002(\005\022\025\n\rerror_message\030\002 \001(\tBA\n0o"
    "rg.waveprotocol.wave.examples.fedone.wav"
    "eserverB\rWaveClientRpc", 622);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "waveclient-rpc.proto", &protobuf_RegisterTypes);
  ProtocolOpenRequest::default_instance_ = new ProtocolOpenRequest();
  ProtocolWaveletUpdate::default_instance_ = new ProtocolWaveletUpdate();
  ProtocolSubmitRequest::default_instance_ = new ProtocolSubmitRequest();
  ProtocolSubmitResponse::default_instance_ = new ProtocolSubmitResponse();
  ProtocolOpenRequest::default_instance_->InitAsDefaultInstance();
  ProtocolWaveletUpdate::default_instance_->InitAsDefaultInstance();
  ProtocolSubmitRequest::default_instance_->InitAsDefaultInstance();
  ProtocolSubmitResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_waveclient_2drpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_waveclient_2drpc_2eproto {
  StaticDescriptorInitializer_waveclient_2drpc_2eproto() {
    protobuf_AddDesc_waveclient_2drpc_2eproto();
  }
} static_descriptor_initializer_waveclient_2drpc_2eproto_;


// ===================================================================

const ::std::string ProtocolOpenRequest::_default_participant_id_;
const ::std::string ProtocolOpenRequest::_default_wave_id_;
#ifndef _MSC_VER
const int ProtocolOpenRequest::kParticipantIdFieldNumber;
const int ProtocolOpenRequest::kWaveIdFieldNumber;
const int ProtocolOpenRequest::kWaveletIdPrefixFieldNumber;
const int ProtocolOpenRequest::kMaximumWaveletsFieldNumber;
#endif  // !_MSC_VER

ProtocolOpenRequest::ProtocolOpenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtocolOpenRequest::InitAsDefaultInstance() {}

ProtocolOpenRequest::ProtocolOpenRequest(const ProtocolOpenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtocolOpenRequest::SharedCtor() {
  _cached_size_ = 0;
  participant_id_ = const_cast< ::std::string*>(&_default_participant_id_);
  wave_id_ = const_cast< ::std::string*>(&_default_wave_id_);
  maximum_wavelets_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolOpenRequest::~ProtocolOpenRequest() {
  SharedDtor();
}

void ProtocolOpenRequest::SharedDtor() {
  if (participant_id_ != &_default_participant_id_) {
    delete participant_id_;
  }
  if (wave_id_ != &_default_wave_id_) {
    delete wave_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ProtocolOpenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolOpenRequest_descriptor_;
}

const ProtocolOpenRequest& ProtocolOpenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_waveclient_2drpc_2eproto();  return *default_instance_;
}

ProtocolOpenRequest* ProtocolOpenRequest::default_instance_ = NULL;

ProtocolOpenRequest* ProtocolOpenRequest::New() const {
  return new ProtocolOpenRequest;
}

void ProtocolOpenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (participant_id_ != &_default_participant_id_) {
        participant_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (wave_id_ != &_default_wave_id_) {
        wave_id_->clear();
      }
    }
    maximum_wavelets_ = 0;
  }
  wavelet_id_prefix_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolOpenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string participant_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_participant_id()));
        if (input->ExpectTag(18)) goto parse_wave_id;
        break;
      }
      
      // required string wave_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wave_id:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_wave_id()));
        if (input->ExpectTag(26)) goto parse_wavelet_id_prefix;
        break;
      }
      
      // repeated string wavelet_id_prefix = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wavelet_id_prefix:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_wavelet_id_prefix()));
        if (input->ExpectTag(26)) goto parse_wavelet_id_prefix;
        if (input->ExpectTag(32)) goto parse_maximum_wavelets;
        break;
      }
      
      // optional int32 maximum_wavelets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_maximum_wavelets:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &maximum_wavelets_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtocolOpenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ProtocolOpenRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string participant_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->participant_id(), output);
  }
  
  // required string wave_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->wave_id(), output);
  }
  
  // repeated string wavelet_id_prefix = 3;
  for (int i = 0; i < this->wavelet_id_prefix_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->wavelet_id_prefix(i), output);
  }
  
  // optional int32 maximum_wavelets = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->maximum_wavelets(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtocolOpenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string participant_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->participant_id(), target);
  }
  
  // required string wave_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->wave_id(), target);
  }
  
  // repeated string wavelet_id_prefix = 3;
  for (int i = 0; i < this->wavelet_id_prefix_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->wavelet_id_prefix(i), target);
  }
  
  // optional int32 maximum_wavelets = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->maximum_wavelets(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtocolOpenRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string participant_id = 1;
    if (has_participant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->participant_id());
    }
    
    // required string wave_id = 2;
    if (has_wave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->wave_id());
    }
    
    // optional int32 maximum_wavelets = 4;
    if (has_maximum_wavelets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->maximum_wavelets());
    }
    
  }
  // repeated string wavelet_id_prefix = 3;
  total_size += 1 * this->wavelet_id_prefix_size();
  for (int i = 0; i < this->wavelet_id_prefix_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->wavelet_id_prefix(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ProtocolOpenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolOpenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolOpenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolOpenRequest::MergeFrom(const ProtocolOpenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  wavelet_id_prefix_.MergeFrom(from.wavelet_id_prefix_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_participant_id(from.participant_id());
    }
    if (from._has_bit(1)) {
      set_wave_id(from.wave_id());
    }
    if (from._has_bit(3)) {
      set_maximum_wavelets(from.maximum_wavelets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolOpenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolOpenRequest::CopyFrom(const ProtocolOpenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolOpenRequest::Swap(ProtocolOpenRequest* other) {
  if (other != this) {
    std::swap(participant_id_, other->participant_id_);
    std::swap(wave_id_, other->wave_id_);
    wavelet_id_prefix_.Swap(&other->wavelet_id_prefix_);
    std::swap(maximum_wavelets_, other->maximum_wavelets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ProtocolOpenRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ProtocolOpenRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ProtocolOpenRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ProtocolOpenRequest_reflection_;
}

// ===================================================================

const ::std::string ProtocolWaveletUpdate::_default_wavelet_name_;
#ifndef _MSC_VER
const int ProtocolWaveletUpdate::kWaveletNameFieldNumber;
const int ProtocolWaveletUpdate::kAppliedDeltaFieldNumber;
const int ProtocolWaveletUpdate::kCommitNoticeFieldNumber;
const int ProtocolWaveletUpdate::kResultingVersionFieldNumber;
#endif  // !_MSC_VER

ProtocolWaveletUpdate::ProtocolWaveletUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtocolWaveletUpdate::InitAsDefaultInstance() {  commit_notice_ = const_cast< ::protocol::ProtocolHashedVersion*>(&::protocol::ProtocolHashedVersion::default_instance());
  resulting_version_ = const_cast< ::protocol::ProtocolHashedVersion*>(&::protocol::ProtocolHashedVersion::default_instance());
}

ProtocolWaveletUpdate::ProtocolWaveletUpdate(const ProtocolWaveletUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtocolWaveletUpdate::SharedCtor() {
  _cached_size_ = 0;
  wavelet_name_ = const_cast< ::std::string*>(&_default_wavelet_name_);
  commit_notice_ = NULL;
  resulting_version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolWaveletUpdate::~ProtocolWaveletUpdate() {
  SharedDtor();
}

void ProtocolWaveletUpdate::SharedDtor() {
  if (wavelet_name_ != &_default_wavelet_name_) {
    delete wavelet_name_;
  }
  if (this != default_instance_) {
    delete commit_notice_;
    delete resulting_version_;
  }
}

const ::google::protobuf::Descriptor* ProtocolWaveletUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolWaveletUpdate_descriptor_;
}

const ProtocolWaveletUpdate& ProtocolWaveletUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_waveclient_2drpc_2eproto();  return *default_instance_;
}

ProtocolWaveletUpdate* ProtocolWaveletUpdate::default_instance_ = NULL;

ProtocolWaveletUpdate* ProtocolWaveletUpdate::New() const {
  return new ProtocolWaveletUpdate;
}

void ProtocolWaveletUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (wavelet_name_ != &_default_wavelet_name_) {
        wavelet_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (commit_notice_ != NULL) commit_notice_->::protocol::ProtocolHashedVersion::Clear();
    }
    if (_has_bit(3)) {
      if (resulting_version_ != NULL) resulting_version_->::protocol::ProtocolHashedVersion::Clear();
    }
  }
  applied_delta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolWaveletUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string wavelet_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_wavelet_name()));
        if (input->ExpectTag(18)) goto parse_applied_delta;
        break;
      }
      
      // repeated .protocol.ProtocolWaveletDelta applied_delta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_applied_delta:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_applied_delta()));
        if (input->ExpectTag(18)) goto parse_applied_delta;
        if (input->ExpectTag(26)) goto parse_commit_notice;
        break;
      }
      
      // optional .protocol.ProtocolHashedVersion commit_notice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_commit_notice:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_commit_notice()));
        if (input->ExpectTag(34)) goto parse_resulting_version;
        break;
      }
      
      // optional .protocol.ProtocolHashedVersion resulting_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_resulting_version:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_resulting_version()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtocolWaveletUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ProtocolWaveletUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string wavelet_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->wavelet_name(), output);
  }
  
  // repeated .protocol.ProtocolWaveletDelta applied_delta = 2;
  for (int i = 0; i < this->applied_delta_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->applied_delta(i), output);
  }
  
  // optional .protocol.ProtocolHashedVersion commit_notice = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->commit_notice(), output);
  }
  
  // optional .protocol.ProtocolHashedVersion resulting_version = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->resulting_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtocolWaveletUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string wavelet_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->wavelet_name(), target);
  }
  
  // repeated .protocol.ProtocolWaveletDelta applied_delta = 2;
  for (int i = 0; i < this->applied_delta_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->applied_delta(i), target);
  }
  
  // optional .protocol.ProtocolHashedVersion commit_notice = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->commit_notice(), target);
  }
  
  // optional .protocol.ProtocolHashedVersion resulting_version = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->resulting_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtocolWaveletUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string wavelet_name = 1;
    if (has_wavelet_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->wavelet_name());
    }
    
    // optional .protocol.ProtocolHashedVersion commit_notice = 3;
    if (has_commit_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->commit_notice());
    }
    
    // optional .protocol.ProtocolHashedVersion resulting_version = 4;
    if (has_resulting_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->resulting_version());
    }
    
  }
  // repeated .protocol.ProtocolWaveletDelta applied_delta = 2;
  total_size += 1 * this->applied_delta_size();
  for (int i = 0; i < this->applied_delta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->applied_delta(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ProtocolWaveletUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolWaveletUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolWaveletUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolWaveletUpdate::MergeFrom(const ProtocolWaveletUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  applied_delta_.MergeFrom(from.applied_delta_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_wavelet_name(from.wavelet_name());
    }
    if (from._has_bit(2)) {
      mutable_commit_notice()->::protocol::ProtocolHashedVersion::MergeFrom(from.commit_notice());
    }
    if (from._has_bit(3)) {
      mutable_resulting_version()->::protocol::ProtocolHashedVersion::MergeFrom(from.resulting_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolWaveletUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolWaveletUpdate::CopyFrom(const ProtocolWaveletUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolWaveletUpdate::Swap(ProtocolWaveletUpdate* other) {
  if (other != this) {
    std::swap(wavelet_name_, other->wavelet_name_);
    applied_delta_.Swap(&other->applied_delta_);
    std::swap(commit_notice_, other->commit_notice_);
    std::swap(resulting_version_, other->resulting_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ProtocolWaveletUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < applied_delta_size(); i++) {
    if (!this->applied_delta(i).IsInitialized()) return false;
  }
  if (has_commit_notice()) {
    if (!this->commit_notice().IsInitialized()) return false;
  }
  if (has_resulting_version()) {
    if (!this->resulting_version().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* ProtocolWaveletUpdate::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ProtocolWaveletUpdate::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ProtocolWaveletUpdate_reflection_;
}

// ===================================================================

const ::std::string ProtocolSubmitRequest::_default_wavelet_name_;
#ifndef _MSC_VER
const int ProtocolSubmitRequest::kWaveletNameFieldNumber;
const int ProtocolSubmitRequest::kDeltaFieldNumber;
#endif  // !_MSC_VER

ProtocolSubmitRequest::ProtocolSubmitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtocolSubmitRequest::InitAsDefaultInstance() {  delta_ = const_cast< ::protocol::ProtocolWaveletDelta*>(&::protocol::ProtocolWaveletDelta::default_instance());
}

ProtocolSubmitRequest::ProtocolSubmitRequest(const ProtocolSubmitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtocolSubmitRequest::SharedCtor() {
  _cached_size_ = 0;
  wavelet_name_ = const_cast< ::std::string*>(&_default_wavelet_name_);
  delta_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolSubmitRequest::~ProtocolSubmitRequest() {
  SharedDtor();
}

void ProtocolSubmitRequest::SharedDtor() {
  if (wavelet_name_ != &_default_wavelet_name_) {
    delete wavelet_name_;
  }
  if (this != default_instance_) {
    delete delta_;
  }
}

const ::google::protobuf::Descriptor* ProtocolSubmitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolSubmitRequest_descriptor_;
}

const ProtocolSubmitRequest& ProtocolSubmitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_waveclient_2drpc_2eproto();  return *default_instance_;
}

ProtocolSubmitRequest* ProtocolSubmitRequest::default_instance_ = NULL;

ProtocolSubmitRequest* ProtocolSubmitRequest::New() const {
  return new ProtocolSubmitRequest;
}

void ProtocolSubmitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (wavelet_name_ != &_default_wavelet_name_) {
        wavelet_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (delta_ != NULL) delta_->::protocol::ProtocolWaveletDelta::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolSubmitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string wavelet_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_wavelet_name()));
        if (input->ExpectTag(18)) goto parse_delta;
        break;
      }
      
      // required .protocol.ProtocolWaveletDelta delta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_delta:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_delta()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtocolSubmitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ProtocolSubmitRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string wavelet_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->wavelet_name(), output);
  }
  
  // required .protocol.ProtocolWaveletDelta delta = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->delta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtocolSubmitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string wavelet_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->wavelet_name(), target);
  }
  
  // required .protocol.ProtocolWaveletDelta delta = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->delta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtocolSubmitRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string wavelet_name = 1;
    if (has_wavelet_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->wavelet_name());
    }
    
    // required .protocol.ProtocolWaveletDelta delta = 2;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->delta());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ProtocolSubmitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolSubmitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolSubmitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolSubmitRequest::MergeFrom(const ProtocolSubmitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_wavelet_name(from.wavelet_name());
    }
    if (from._has_bit(1)) {
      mutable_delta()->::protocol::ProtocolWaveletDelta::MergeFrom(from.delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolSubmitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolSubmitRequest::CopyFrom(const ProtocolSubmitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolSubmitRequest::Swap(ProtocolSubmitRequest* other) {
  if (other != this) {
    std::swap(wavelet_name_, other->wavelet_name_);
    std::swap(delta_, other->delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ProtocolSubmitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_delta()) {
    if (!this->delta().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* ProtocolSubmitRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ProtocolSubmitRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ProtocolSubmitRequest_reflection_;
}

// ===================================================================

const ::std::string ProtocolSubmitResponse::_default_error_message_;
#ifndef _MSC_VER
const int ProtocolSubmitResponse::kOperationsAppliedFieldNumber;
const int ProtocolSubmitResponse::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

ProtocolSubmitResponse::ProtocolSubmitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtocolSubmitResponse::InitAsDefaultInstance() {}

ProtocolSubmitResponse::ProtocolSubmitResponse(const ProtocolSubmitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtocolSubmitResponse::SharedCtor() {
  _cached_size_ = 0;
  operations_applied_ = 0;
  error_message_ = const_cast< ::std::string*>(&_default_error_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolSubmitResponse::~ProtocolSubmitResponse() {
  SharedDtor();
}

void ProtocolSubmitResponse::SharedDtor() {
  if (error_message_ != &_default_error_message_) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ProtocolSubmitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolSubmitResponse_descriptor_;
}

const ProtocolSubmitResponse& ProtocolSubmitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_waveclient_2drpc_2eproto();  return *default_instance_;
}

ProtocolSubmitResponse* ProtocolSubmitResponse::default_instance_ = NULL;

ProtocolSubmitResponse* ProtocolSubmitResponse::New() const {
  return new ProtocolSubmitResponse;
}

void ProtocolSubmitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operations_applied_ = 0;
    if (_has_bit(1)) {
      if (error_message_ != &_default_error_message_) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolSubmitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required int32 operations_applied = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &operations_applied_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }
      
      // optional string error_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_error_message:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_error_message()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtocolSubmitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ProtocolSubmitResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 operations_applied = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->operations_applied(), output);
  }
  
  // optional string error_message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->error_message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtocolSubmitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 operations_applied = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->operations_applied(), target);
  }
  
  // optional string error_message = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->error_message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtocolSubmitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 operations_applied = 1;
    if (has_operations_applied()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->operations_applied());
    }
    
    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->error_message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ProtocolSubmitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolSubmitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolSubmitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolSubmitResponse::MergeFrom(const ProtocolSubmitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_operations_applied(from.operations_applied());
    }
    if (from._has_bit(1)) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolSubmitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolSubmitResponse::CopyFrom(const ProtocolSubmitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolSubmitResponse::Swap(ProtocolSubmitResponse* other) {
  if (other != this) {
    std::swap(operations_applied_, other->operations_applied_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ProtocolSubmitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ProtocolSubmitResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ProtocolSubmitResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ProtocolSubmitResponse_reflection_;
}

}  // namespace waveserver
