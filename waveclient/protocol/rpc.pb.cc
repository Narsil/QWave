// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* CancelRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcFinished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcFinished_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_2eproto() {
  protobuf_AddDesc_rpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc.proto");
  GOOGLE_CHECK(file != NULL);
  CancelRpc_descriptor_ = file->message_type(0);
  static const int CancelRpc_offsets_[1] = {
  };
  CancelRpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelRpc_descriptor_,
      CancelRpc::default_instance_,
      CancelRpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelRpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelRpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelRpc));
  RpcFinished_descriptor_ = file->message_type(1);
  static const int RpcFinished_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcFinished, failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcFinished, error_text_),
  };
  RpcFinished_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcFinished_descriptor_,
      RpcFinished::default_instance_,
      RpcFinished_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcFinished, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcFinished, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcFinished));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelRpc_descriptor_, &CancelRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcFinished_descriptor_, &RpcFinished::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_2eproto() {
  delete CancelRpc::default_instance_;
  delete CancelRpc_reflection_;
  delete RpcFinished::default_instance_;
  delete RpcFinished_reflection_;
}

void protobuf_AddDesc_rpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_descriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\trpc.proto\022\003rpc\032\020descriptor.proto\"\013\n\tCa"
    "ncelRpc\"1\n\013RpcFinished\022\016\n\006failed\030\001 \002(\010\022\022"
    "\n\nerror_text\030\002 \001(\t:@\n\020is_streaming_rpc\022\036"
    ".google.protobuf.MethodOptions\030\353\007 \001(\010:\005f"
    "alseB0\n)org.waveprotocol.wave.examples.f"
    "edone.rpcB\003Rpc", 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc.proto", &protobuf_RegisterTypes);
  CancelRpc::default_instance_ = new CancelRpc();
  RpcFinished::default_instance_ = new RpcFinished();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MethodOptions::default_instance(),
    1003, 8, false, false);
  CancelRpc::default_instance_->InitAsDefaultInstance();
  RpcFinished::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_2eproto {
  StaticDescriptorInitializer_rpc_2eproto() {
    protobuf_AddDesc_rpc_2eproto();
  }
} static_descriptor_initializer_rpc_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CancelRpc::CancelRpc() {
  SharedCtor();
}

void CancelRpc::InitAsDefaultInstance() {
}

CancelRpc::CancelRpc(const CancelRpc& from) {
  SharedCtor();
  MergeFrom(from);
}

void CancelRpc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelRpc::~CancelRpc() {
  SharedDtor();
}

void CancelRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CancelRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelRpc_descriptor_;
}

const CancelRpc& CancelRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

CancelRpc* CancelRpc::default_instance_ = NULL;

CancelRpc* CancelRpc::New() const {
  return new CancelRpc;
}

void CancelRpc::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CancelRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CancelRpc::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelRpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelRpc::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CancelRpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelRpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelRpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelRpc::MergeFrom(const CancelRpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelRpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelRpc::CopyFrom(const CancelRpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelRpc::IsInitialized() const {
  
  return true;
}

void CancelRpc::Swap(CancelRpc* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelRpc_descriptor_;
  metadata.reflection = CancelRpc_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpcFinished::_default_error_text_;
#ifndef _MSC_VER
const int RpcFinished::kFailedFieldNumber;
const int RpcFinished::kErrorTextFieldNumber;
#endif  // !_MSC_VER

RpcFinished::RpcFinished() {
  SharedCtor();
}

void RpcFinished::InitAsDefaultInstance() {
}

RpcFinished::RpcFinished(const RpcFinished& from) {
  SharedCtor();
  MergeFrom(from);
}

void RpcFinished::SharedCtor() {
  _cached_size_ = 0;
  failed_ = false;
  error_text_ = const_cast< ::std::string*>(&_default_error_text_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcFinished::~RpcFinished() {
  SharedDtor();
}

void RpcFinished::SharedDtor() {
  if (error_text_ != &_default_error_text_) {
    delete error_text_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RpcFinished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcFinished_descriptor_;
}

const RpcFinished& RpcFinished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

RpcFinished* RpcFinished::default_instance_ = NULL;

RpcFinished* RpcFinished::New() const {
  return new RpcFinished;
}

void RpcFinished::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    failed_ = false;
    if (_has_bit(1)) {
      if (error_text_ != &_default_error_text_) {
        error_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcFinished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool failed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &failed_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_error_text;
        break;
      }
      
      // optional string error_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_error_text:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_error_text()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->error_text().data(), this->error_text().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcFinished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RpcFinished::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bool failed = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->failed(), output);
  }
  
  // optional string error_text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcFinished::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool failed = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->failed(), target);
  }
  
  // optional string error_text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcFinished::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool failed = 1;
    if (has_failed()) {
      total_size += 1 + 1;
    }
    
    // optional string error_text = 2;
    if (has_error_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RpcFinished::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcFinished* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcFinished*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcFinished::MergeFrom(const RpcFinished& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_failed(from.failed());
    }
    if (from._has_bit(1)) {
      set_error_text(from.error_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcFinished::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcFinished::CopyFrom(const RpcFinished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcFinished::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RpcFinished::Swap(RpcFinished* other) {
  if (other != this) {
    std::swap(failed_, other->failed_);
    std::swap(error_text_, other->error_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcFinished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcFinished_descriptor_;
  metadata.reflection = RpcFinished_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  is_streaming_rpc(kIsStreamingRpcFieldNumber, false);

}  // namespace rpc
