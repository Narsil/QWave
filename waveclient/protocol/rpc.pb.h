// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "descriptor.pb.h"

namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_2eproto();
void protobuf_AssignDesc_rpc_2eproto();
void protobuf_ShutdownFile_rpc_2eproto();

class CancelRpc;
class RpcFinished;

// ===================================================================

class CancelRpc : public ::google::protobuf::Message {
 public:
  CancelRpc();
  virtual ~CancelRpc();
  
  CancelRpc(const CancelRpc& from);
  
  inline CancelRpc& operator=(const CancelRpc& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelRpc& default_instance();
  void Swap(CancelRpc* other);
  
  // implements Message ----------------------------------------------
  
  CancelRpc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CancelRpc& from);
  void MergeFrom(const CancelRpc& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CancelRpc* default_instance_;
};
// -------------------------------------------------------------------

class RpcFinished : public ::google::protobuf::Message {
 public:
  RpcFinished();
  virtual ~RpcFinished();
  
  RpcFinished(const RpcFinished& from);
  
  inline RpcFinished& operator=(const RpcFinished& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcFinished& default_instance();
  void Swap(RpcFinished* other);
  
  // implements Message ----------------------------------------------
  
  RpcFinished* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcFinished& from);
  void MergeFrom(const RpcFinished& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool failed = 1;
  inline bool has_failed() const;
  inline void clear_failed();
  static const int kFailedFieldNumber = 1;
  inline bool failed() const;
  inline void set_failed(bool value);
  
  // optional string error_text = 2;
  inline bool has_error_text() const;
  inline void clear_error_text();
  static const int kErrorTextFieldNumber = 2;
  inline const ::std::string& error_text() const;
  inline void set_error_text(const ::std::string& value);
  inline void set_error_text(const char* value);
  inline void set_error_text(const char* value, size_t size);
  inline ::std::string* mutable_error_text();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool failed_;
  ::std::string* error_text_;
  static const ::std::string _default_error_text_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RpcFinished* default_instance_;
};
// ===================================================================


// ===================================================================

static const int kIsStreamingRpcFieldNumber = 1003;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  is_streaming_rpc;

// ===================================================================

// CancelRpc

// -------------------------------------------------------------------

// RpcFinished

// required bool failed = 1;
inline bool RpcFinished::has_failed() const {
  return _has_bit(0);
}
inline void RpcFinished::clear_failed() {
  failed_ = false;
  _clear_bit(0);
}
inline bool RpcFinished::failed() const {
  return failed_;
}
inline void RpcFinished::set_failed(bool value) {
  _set_bit(0);
  failed_ = value;
}

// optional string error_text = 2;
inline bool RpcFinished::has_error_text() const {
  return _has_bit(1);
}
inline void RpcFinished::clear_error_text() {
  if (error_text_ != &_default_error_text_) {
    error_text_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RpcFinished::error_text() const {
  return *error_text_;
}
inline void RpcFinished::set_error_text(const ::std::string& value) {
  _set_bit(1);
  if (error_text_ == &_default_error_text_) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(value);
}
inline void RpcFinished::set_error_text(const char* value) {
  _set_bit(1);
  if (error_text_ == &_default_error_text_) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(value);
}
inline void RpcFinished::set_error_text(const char* value, size_t size) {
  _set_bit(1);
  if (error_text_ == &_default_error_text_) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcFinished::mutable_error_text() {
  _set_bit(1);
  if (error_text_ == &_default_error_text_) {
    error_text_ = new ::std::string;
  }
  return error_text_;
}


}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
