// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "commitlog.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace commitlog {

namespace {

const ::google::protobuf::Descriptor* ProtocolSubmitRequestList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolSubmitRequestList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_commitlog_2eproto() {
  protobuf_AddDesc_commitlog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "commitlog.proto");
  GOOGLE_CHECK(file != NULL);
  ProtocolSubmitRequestList_descriptor_ = file->message_type(0);
  static const int ProtocolSubmitRequestList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolSubmitRequestList, requests_),
  };
  ProtocolSubmitRequestList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolSubmitRequestList_descriptor_,
      ProtocolSubmitRequestList::default_instance_,
      ProtocolSubmitRequestList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolSubmitRequestList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolSubmitRequestList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolSubmitRequestList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_commitlog_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolSubmitRequestList_descriptor_, &ProtocolSubmitRequestList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_commitlog_2eproto() {
  delete ProtocolSubmitRequestList::default_instance_;
  delete ProtocolSubmitRequestList_reflection_;
}

void protobuf_AddDesc_commitlog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::waveserver::protobuf_AddDesc_waveclient_2drpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017commitlog.proto\022\tcommitlog\032\024waveclient"
    "-rpc.proto\"P\n\031ProtocolSubmitRequestList\022"
    "3\n\010requests\030\001 \003(\0132!.waveserver.ProtocolS"
    "ubmitRequest", 132);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commitlog.proto", &protobuf_RegisterTypes);
  ProtocolSubmitRequestList::default_instance_ = new ProtocolSubmitRequestList();
  ProtocolSubmitRequestList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commitlog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commitlog_2eproto {
  StaticDescriptorInitializer_commitlog_2eproto() {
    protobuf_AddDesc_commitlog_2eproto();
  }
} static_descriptor_initializer_commitlog_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ProtocolSubmitRequestList::kRequestsFieldNumber;
#endif  // !_MSC_VER

ProtocolSubmitRequestList::ProtocolSubmitRequestList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtocolSubmitRequestList::InitAsDefaultInstance() {}

ProtocolSubmitRequestList::ProtocolSubmitRequestList(const ProtocolSubmitRequestList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtocolSubmitRequestList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolSubmitRequestList::~ProtocolSubmitRequestList() {
  SharedDtor();
}

void ProtocolSubmitRequestList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ProtocolSubmitRequestList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolSubmitRequestList_descriptor_;
}

const ProtocolSubmitRequestList& ProtocolSubmitRequestList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commitlog_2eproto();  return *default_instance_;
}

ProtocolSubmitRequestList* ProtocolSubmitRequestList::default_instance_ = NULL;

ProtocolSubmitRequestList* ProtocolSubmitRequestList::New() const {
  return new ProtocolSubmitRequestList;
}

void ProtocolSubmitRequestList::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolSubmitRequestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .waveserver.ProtocolSubmitRequest requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_requests:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_requests()));
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtocolSubmitRequestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ProtocolSubmitRequestList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .waveserver.ProtocolSubmitRequest requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtocolSubmitRequestList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .waveserver.ProtocolSubmitRequest requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtocolSubmitRequestList::ByteSize() const {
  int total_size = 0;
  
  // repeated .waveserver.ProtocolSubmitRequest requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ProtocolSubmitRequestList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolSubmitRequestList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolSubmitRequestList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolSubmitRequestList::MergeFrom(const ProtocolSubmitRequestList& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolSubmitRequestList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolSubmitRequestList::CopyFrom(const ProtocolSubmitRequestList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolSubmitRequestList::Swap(ProtocolSubmitRequestList* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ProtocolSubmitRequestList::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* ProtocolSubmitRequestList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ProtocolSubmitRequestList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ProtocolSubmitRequestList_reflection_;
}

}  // namespace commitlog
